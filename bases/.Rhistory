phis = rep(10, n)
phis
rep(10, n)
1:n
1:n
indice = 1
anteriores = 1:(indice-1)
anteriores
1:(indice)
anteriores = 1:(indice)
anteriores
fBarra = ppoisbinom(anteriores, pp= probabilidadesExito, lower_tail = TRUE)
fBarra
fBarraZero = ppoisbinom(0, pp= probabilidadesExito, lower_tail = TRUE)
fBarraZero
indice-1
phis[1:(indice)]
#seleccionamos los phis anteriores a indice empezando desde 1
phisAnteriores = phis[1:(indice)]
phisAnteriores
devtools::install_github("diegovalle/mxmaps")
entidades=c("AGU", "BCN", "BCS", "CAM", "COA", "COL", "CHP",
"CHH", "CMX", "DUR", "GUA", "GRO", "HID", "JAL",
"MEX", "MIC", "MOR", "NAY", "NLE", "OAX", "PUE",
"QUE", "ROO", "SLP", "SIN", "SON", "TAB", "TAM",
"TLA", "VER", "YUC", "ZAC")
#estimamos el porcentaje por estados (incluye errores estandar)
porcentajePorEstados = svyby(~respuesta,~ENT,design=hogar, svymean)
baseHogar <- read.csv("~/Documents/muestreo/tarea3/THOGAR.csv")
#cambiamos a categorico la variable P3A1_1 y el nombre de la columa
#P3A1_1 por respuesta
baseHogar = baseHogar %>% mutate( P3A1_1= as.factor(P3A1_1) )%>%
rename( respuesta = P3A1_1 )
library(survey)
options(survey.lonely.psu="adjust")
#creamos el modelo con survey
hogar <-svydesign(id=~UPM_DIS,strat=~EST_DIS,weight=~FACTOR,data=baseHogar,
nest=TRUE)
#revisamos el modelo
summary(hogar)
#revisamos cuantos registros hay de las opciones posibles
# 1- quiere vivienda nueva , 2- no quiere , 3-no sabe
svytable(~respuesta, hogar)
#en porcentajes
prop.table(svytable(~respuesta,design=hogar))*100
print(porcentajePorEstados)
baseHogar <- read.csv("~/Documents/muestreo/tarea3/THOGAR.csv")
#cambiamos a categorico la variable P3A1_1 y el nombre de la columa
#P3A1_1 por respuesta
baseHogar = baseHogar %>% mutate( P3A1_1= as.factor(P3A1_1) )%>%
rename( respuesta = P3A1_1 )
library(dplyr)
library(tidyverse)
baseHogar <- read.csv("~/Documents/muestreo/tarea3/THOGAR.csv")
#cambiamos a categorico la variable P3A1_1 y el nombre de la columa
#P3A1_1 por respuesta
baseHogar = baseHogar %>% mutate( P3A1_1= as.factor(P3A1_1) )%>%
rename( respuesta = P3A1_1 )
library(survey)
options(survey.lonely.psu="adjust")
#creamos el modelo con survey
hogar <-svydesign(id=~UPM_DIS,strat=~EST_DIS,weight=~FACTOR,data=baseHogar,
nest=TRUE)
#revisamos el modelo
summary(hogar)
#estimamos el porcentaje por estados (incluye errores estandar)
porcentajePorEstados = svyby(~respuesta,~ENT,design=hogar, svymean)
print(porcentajePorEstados)
porcentajePorEstados
porcentajePorEstados %>% select( ENT, respuesta1)
tablaPorcentajes = porcentajePorEstados %>% select( ENT, respuesta1)
tablaPorcentajes
tablaPorcentajes = as.tibble( porcentajePorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes = as_tibble( porcentajePorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes
tablaPorcentajes %>% mutate( ENT = as.factor(ENT) )
tablaPorcentajes %>% mutate( ENT = as.character (ENT) )
tablaPorcentajes
tablaPorcentajes = as_tibble( porcentajePorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes %>% mutate( ENT = as.character (ENT) )
tablaPorcentajes
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) )
tablaPorcentajes
tablaPorcentajes = as_tibble( porcentajePorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes = as_tibble( porcentajePorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes
tablaPorcentajes = tablaPorcentajes %>% mutate( estado = entidaes )
entidades=c("AGU", "BCN", "BCS", "CAM", "COA", "COL", "CHP",
"CHH", "CMX", "DUR", "GUA", "GRO", "HID", "JAL",
"MEX", "MIC", "MOR", "NAY", "NLE", "OAX", "PUE",
"QUE", "ROO", "SLP", "SIN", "SON", "TAB", "TAM",
"TLA", "VER", "YUC", "ZAC")
tablaPorcentajes = tablaPorcentajes %>% mutate( estado = entidaes )
tablaPorcentajes = tablaPorcentajes %>% mutate( estado = entidades )
tablaPorcentajes
tablaPorcentajes %>% view()
tablaPorcentajes %>% mutate(respuesta1*10) %>% view()
tablaPorcentajes %>% summarise( total = sum(respuesta1) )
tablaPorcentajes %>% mutate( porcentaje = respuesta1/ sum(respuesta1) )
tablaPorcentajes %>% mutate( porcentaje = respuesta1/ sum(respuesta1) )  %>%
summarise( conteo = sum(porcentaje))
tablaPorcentajes %>% mutate( porcentaje = respuesta1/ sum(respuesta1) )
tablaPorcentajes = tablaPorcentajes %>% mutate( estado = entidades ) %>%
mutate( porcentaje = respuesta1/ sum(respuesta1) ) %>%
view()
tablaPorcentajes = tablaPorcentajes %>% mutate( estado = entidades ) %>%
mutate( porcentaje = respuesta1/ sum(respuesta1) )
tablaPorcentajes
ggplot(tablaPorcentajes, aes(estado, estado, fill= porcentaje)) +
geom_tile()
library(ggplot2)
example(map_data)
install.packages("choroplethr")
library("choroplethr")
write_csv(tablaPorcentajes)
#row.names=FALSE)
write.csv(tablaPorcentajes,"/Users/shoshenskoe/Documents/muestreo/tarea3/porcentajes.csv",
row.names=FALSE)
devtools::install_github('diegovalle/mxmaps')
library("mxmaps")
df_mxstate_2020$value <- df_mxstate_2020$pop
mxstate_choropleth(df_mxstate_2020,
title = "Total population, by state")
knitr::kable(head(df_mxstate_2020[,c("region", "value")]))
tablaPorcentajes = as_tibble( porcentajePorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )
tablaPorcentajes
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )  %>%
mutate( value = value/ sum(value) )
tablaPorcentajes = as_tibble( porcentajePorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )  %>%
mutate( value = value/ sum(value) )
tablaPorcentajes
mxstate_choropleth(      tablaPorcentajes,             num_colors = 1,
title = "Grafica",
legend = "%"))
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
tablaPorcentajes = as_tibble( totalPorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes
#estimamos el total por estados (incluye errores estandar)
totalPorEstados = svyby(~respuesta,~ENT,design=hogar, svytotal)
print(totalPorEstados)
totalPorEstados
tablaPorcentajes = as_tibble( totalPorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )  %>%
mutate( value = value/ sum(value) )
tablaPorcentajes
tablaPorcentajes %>% summarise(conteo = sum(value))
tablaPorcentajes = tablaPorcentajes %>% mutate( estado = entidades ) %>%
mutate( porcentaje = respuesta1/ sum(respuesta1) )
tablaPorcentajes = as_tibble( totalPorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )  %>%
mutate( value = value/ sum(value) )
tablaPorcentajes %>% summarise(conteo = sum(value))
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
tablaPorcentajes = as_tibble( totalPorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )
tablaPorcentajes %>% summarise(conteo = sum(value))
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )  %>%
mutate( value = value/ sum(value) )
tablaPorcentajes %>% summarise(conteo = sum(value))
tablaPorcentajes = as_tibble( totalPorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )  %>%
mutate( value = value/ sum(value) )
tablaPorcentajes %>% summarise(conteo = sum(value))
entidades=c("AGU", "BCN", "BCS", "CAM", "COA", "COL", "CHP",
"CHH", "CMX", "DUR", "GUA", "GRO", "HID", "JAL",
"MEX", "MIC", "MOR", "NAY", "NLE", "OAX", "PUE",
"QUE", "ROO", "SLP", "SIN", "SON", "TAB", "TAM",
"TLA", "VER", "YUC", "ZAC")
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
totalPorEstados
tablaPorcentajes = as_tibble( totalPorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )  %>%
mutate( value = value/ sum(value) )
tablaPorcentajes %>% summarise(conteo = sum(value))
tablaPorcentajes
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
tablaPorcentajes = as_tibble( totalPorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )  %>%
mutate( value = (value/ sum(value) )*100 )
tablaPorcentajes %>% summarise(conteo = sum(value))
tablaPorcentajes
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
sum( tablaPorcentajes$value )
max(tablaPorcentajes$value)
tablaPorcentajes = as_tibble( porcentajePorEstados %>% select( ENT, respuesta1) )
tablaPorcentajes= tablaPorcentajes %>% mutate( ENT = as.character (ENT) ) %>%
rename( region = ENT, value= respuesta1 )
tablaPorcentajes
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
install.packages("inegiR")
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
library("mxmaps")
mxstate_choropleth( tablaPorcentajes,
num_colors = 1, title = "Grafica",legend = "%")
install.packages("nloptr")
install.packages("nloptr")
library(nloptr)
eval_f <- function(x) {
return(list(objective = exp(x), gradient = exp(x))) # For exp(x), the gradient is also exp(x)
}
# Define the lower and upper bounds for x
lb <- 4
ub <- 8
# Set an initial value for x within the bounds
x0 <- 6 # You can choose any value between 4 and 8 as a starting point
# Set up the optimization options
opts <- list(
"algorithm" = "NLOPT_LD_MMA", # A good choice for bound-constrained problems
"xtol_rel" = 1.0e-8,         # Relative tolerance on x
"maxeval" = 1000             # Maximum number of evaluations
)
# Run the optimization
result <- nloptr(
x0 = x0,
eval_f = eval_f,
lb = lb,
ub = ub,
opts = opts
)
# Print the results
print(result)
# The optimal x value
print(paste("Optimal x:", result$solution))
# The minimum value of exp(x)
print(paste("Minimum exp(x):", result$objective))
eval_f <- function(x) {
return(list(objective = exp(x), gradient = exp(x))) # For exp(x), the gradient is also exp(x)
}
# Define the lower and upper bounds for x
lb <- 4
ub <- 8
# Set an initial value for x within the bounds
x0 <- 6 # You can choose any value between 4 and 8 as a starting point
# Set up the optimization options
opts <- list(
"algorithm" = "NLOPT_LD_MMA", # A good choice for bound-constrained problems
"xtol_rel" = 1.0e-8,         # Relative tolerance on x
"maxeval" = 1000             # Maximum number of evaluations
)
# Run the optimization
result <- nloptr(
x0 = x0,
eval_f = eval_f,
lb = lb,
ub = ub,
opts = opts
)
# Print the results
print(result)
# The optimal x value
print(paste("Optimal x:", result$solution))
# The minimum value of exp(x)
print(paste("Minimum exp(x):", result$objective))
# Print the results
print(result$x0)
f <- function(x) {
return(exp(x))
}
# 2. Set the lower and upper bounds
lower_bound <- 4
upper_bound <- 8
# 3. Use optim with the "L-BFGS-B" method to handle bounds
#    'par' is the initial guess. It should be within the bounds.
#    'lower' and 'upper' define the bounds.
result <- optim(par = (lower_bound + upper_bound) / 2, # Initial guess, e.g., midpoint
fn = f,
method = "L-BFGS-B",
lower = lower_bound,
upper = upper_bound)
# 4. Print the results
print(result)
# Extract the optimal x value and the minimum function value
optimal_x <- result$par
min_value <- result$value
cat("\nOptimal x:", optimal_x, "\n")
cat("Minimum value of exp(x):", min_value, "\n")
# 4. Print the results
print(result$value)
# 4. Print the results
print(result$par)
(lower_bound + upper_bound) / 2
# 3. Use optim with the "L-BFGS-B" method to handle bounds
#    'par' is the initial guess. It should be within the bounds.
#    'lower' and 'upper' define the bounds.
result <- optim(par = 7, # Initial guess, e.g., midpoint
fn = f,
method = "L-BFGS-B",
lower = lower_bound,
upper = upper_bound)
# 4. Print the results
print(result$par)
# 2. Set the lower and upper bounds
lower_bound <- 3
upper_bound <- 8
# 3. Use optim with the "L-BFGS-B" method to handle bounds
#    'par' is the initial guess. It should be within the bounds.
#    'lower' and 'upper' define the bounds.
result <- optim(par = 7, # Initial guess, e.g., midpoint
fn = f,
method = "L-BFGS-B",
lower = lower_bound,
upper = upper_bound)
# 4. Print the results
print(result$par)
cat("\nOptimal x:", optimal_x, "\n")
cat("Minimum value of exp(x):", min_value, "\n")
install.packages("nleqslv")
library(nleqslv)
setwd("/Users/shoshenskoe/Documents/muestreo/Tesis/bases")
library(dplyr)
library(tidyverse)
library(stringr)
set.seed(1)
baseIne = read.csv("~/Documents/muestreo/Tesis/bases/PRES_2024.csv",
encoding="UTF-8")
colnames(baseIne)
# Transformamos la base del INE
listaColumnasNecesarias = c( colnames(baseIne)[1:5],
colnames(baseIne)[13:30] )
#vemos que hay nas en la columna de los distritos
nas = which( baseIne$ID_DISTRITO_FEDERAL == "N/A" )
length(nas)
baseIne[nas,]  %>% group_by( ENTIDAD  ) %>%
summarise( conteo = n() ) %>%  arrange(desc(conteo) , .by_group=TRUE)
#eliminamos los renglones que no posean un distrito federal
baseIne = baseIne %>%
filter(!row_number() %in% nas )
baseIne = baseIne %>%
select( all_of( listaColumnasNecesarias ) )  %>%
rename( candicatoNoRegistrado = CANDIDATO.A.NO.REGISTRADO.A ,
votosNulos = VOTOS.NULOS )
#cambiamos todas las columnas del tipo caracter por numerico
baseIne[,5:22] = baseIne[,5:22] %>% mutate_if(is.character, as.integer)
#convertimos a string los id de las entidad y el distrito electoral
baseIne$ID_ENTIDAD =  as.character(baseIne$ID_ENTIDAD)
baseIne$ID_DISTRITO_FEDERAL = as.character(baseIne$ID_DISTRITO_FEDERAL)
#establecemos una longitud determinada y colocamos cero al comienzo
col1 = stringr::str_pad( baseIne$ID_ENTIDAD , width =2, pad = "0" )
col2= stringr::str_pad( baseIne$ID_DISTRITO_FEDERAL , width =2, pad = "0" )
baseIne$idEstrato =  paste(col1,col2, sep = "")
baseIne$idEstrato = as.factor( baseIne$idEstrato )
#calculamos los totales
baseIne = baseIne %>% mutate(total = TOTAL_VOTOS_CALCULADOS - votosNulos - candicatoNoRegistrado)
baseIne = baseIne %>% mutate( totalPan= PAN+ PRD+ PRI +PAN_PRI_PRD + PAN_PRI
+ PRI_PRD
+ PAN_PRD )
baseIne = baseIne %>% mutate( totalMorena= MORENA + PT + PVEM +  PVEM_PT+
PT_MORENA + PVEM_PT_MORENA + PVEM_MORENA )
baseIne = baseIne %>% mutate( totalMC = MC )
baseIne = baseIne %>%
select( CLAVE_ACTA, ID_ENTIDAD, idEstrato, totalPan, totalMorena, totalMC, total )
str(baseIne)
numeroActas = length( baseIne$CLAVE_ACTA )
totalVotos = sum( baseIne$total )
thetaPoblacionalMor = sum( baseIne$totalMorena ) / totalVotos
thetaPoblacionalPan = sum( baseIne$totalPan ) / totalVotos
thetaPoblacionalMC = sum( baseIne$totalMC ) / totalVotos
setwd("/Users/shoshenskoe/Documents/muestreo/Tesis/bases")
library(dplyr)
library(tidyverse)
library(stringr)
set.seed(1)
baseIne = read.csv("~/Documents/muestreo/Tesis/bases/PRES_2024.csv",
encoding="UTF-8")
colnames(baseIne)
# Transformamos la base del INE
listaColumnasNecesarias = c( colnames(baseIne)[1:5],
colnames(baseIne)[13:30] )
#vemos que hay nas en la columna de los distritos
nas = which( baseIne$ID_DISTRITO_FEDERAL == "N/A" )
length(nas)
baseIne[nas,]  %>% group_by( ENTIDAD  ) %>%
summarise( conteo = n() ) %>%  arrange(desc(conteo) , .by_group=TRUE)
#baseIne[nas,] %>% summarise( totalVotosna =  sum(total) )
#baseIne[nas,] %>% group_by( ID_ENTIDAD  ) %>%
#  summarise( conteo = n(), porcentajeVotos = sum(total)/totalVotos ) %>%
#  arrange(desc(conteo) , .by_group=TRUE)
#eliminamos los renglones que no posean un distrito federal
baseIne = baseIne %>%
filter(!row_number() %in% nas )
baseIne = baseIne %>%
select( all_of( listaColumnasNecesarias ) )  %>%
rename( candicatoNoRegistrado = CANDIDATO.A.NO.REGISTRADO.A ,
votosNulos = VOTOS.NULOS )
#cambiamos todas las columnas del tipo caracter por numerico
baseIne[,5:22] = baseIne[,5:22] %>% mutate_if(is.character, as.integer)
#creamos un codigo de estrato y usamos biblioteca stringr para ajustar
#la longitud de la cadena
#library(stringr)
#convertimos a string los id de las entidad y el distrito electoral
baseIne$ID_ENTIDAD =  as.character(baseIne$ID_ENTIDAD)
baseIne$ID_DISTRITO_FEDERAL = as.character(baseIne$ID_DISTRITO_FEDERAL)
#establecemos una longitud determinada y colocamos cero al comienzo
col1 = stringr::str_pad( baseIne$ID_ENTIDAD , width =2, pad = "0" )
col2= stringr::str_pad( baseIne$ID_DISTRITO_FEDERAL , width =2, pad = "0" )
#creamos la nueva columna en la base
baseIne$idEstrato =  paste(col1,col2, sep = "")
baseIne$idEstrato = as.factor( baseIne$idEstrato )
#baseIne = baseIne %>% unite( col1, col2, col = "idEstrato", sep = "" )
#calculamos los totales
baseIne = baseIne %>% mutate(total = TOTAL_VOTOS_CALCULADOS - votosNulos - candicatoNoRegistrado)
baseIne = baseIne %>% mutate( totalPan= PAN+ PRD+ PRI +PAN_PRI_PRD + PAN_PRI
+ PRI_PRD
+ PAN_PRD )
baseIne = baseIne %>% mutate( totalMorena= MORENA + PT + PVEM +  PVEM_PT+
PT_MORENA + PVEM_PT_MORENA + PVEM_MORENA )
baseIne = baseIne %>% mutate( totalMC = MC )
baseIne = baseIne %>%
select( CLAVE_ACTA, ID_ENTIDAD, idEstrato, totalPan, totalMorena, totalMC, total )
str(baseIne)
#valores poblacionales
numeroActas = length( baseIne$CLAVE_ACTA )
totalVotos = sum( baseIne$total )
thetaPoblacionalMor = sum( baseIne$totalMorena ) / totalVotos
thetaPoblacionalPan = sum( baseIne$totalPan ) / totalVotos
thetaPoblacionalMC = sum( baseIne$totalMC ) / totalVotos
#Muestreo aleatorio simple
#ajustamos la base para calcular un estimador HT de un total sencillo
baseIne = baseIne%>% mutate( totalMorena = totalMorena/ totalVotos,
totalPan = totalPan / totalVotos ,
totalMC = totalMC / totalVotos )
estimadoresMor= rep(0,1000)
varianzasMor = rep(0,1000)
estimadoresPan =  rep(0,1000)
varianzasPan = rep(0,1000)
estimadoresMC = rep(0,1000)
varianzasMC = rep(0,1000)
#realizamos el muestreo mas
porcentaje = 0.4
n = round( numeroActas*porcentaje)
for (iteracion in 1:3000) {
indicesSeleccionados = sample(1:numeroActas,
size = n ,
replace = FALSE)
estimadoresMor[iteracion] = ( numeroActas*
mean( baseIne$totalMorena[indicesSeleccionados]  ) )
varianzasMor[iteracion] = ( ( (numeroActas^2) / n )*
( 1- (n / numeroActas) ) ) *var( baseIne$totalMorena[indicesSeleccionados] )
estimadoresPan[iteracion] = ( numeroActas*
mean( baseIne$totalPan[indicesSeleccionados] ) )
varianzasPan[iteracion] = ( ( (numeroActas^2) / n )*
( 1- (n / numeroActas) ) )*var( baseIne$totalPan[indicesSeleccionados] )
estimadoresMC[iteracion] = ( numeroActas*
mean( baseIne$totalMC[indicesSeleccionados] ) )
varianzasMC[iteracion] = ( ( (numeroActas^2) / n )*
( 1- (n / numeroActas) ) )*var( baseIne$totalMC[indicesSeleccionados] )
} #termina ciclo for para elaborar estimaciones
#graficamos los estimadores
par(mfrow = c(2, 2))
par(mar = c(2, 2, 2, 2) )
par("mar")
tituloMorena = paste ( "Morena  ", porcentaje*100, "%" )
tituloPan = paste ( "Pan n =  ", porcentaje*100, "%" )
tituloMc = paste ( "MC n =  ", porcentaje*100, "%" )
hist(estimadoresMor, breaks= 50, main = tituloMorena,
xlab = "Estimador", ylab = "Frecuencia")
abline(v= thetaPoblacionalMor, col = "red" )
hist(estimadoresPan,
xlab = "Estimador",  breaks= 50, ylab = "Frecuencia", main = tituloPan)
abline(v= thetaPoblacionalPan, col = "red" )
hist(estimadoresMC,
xlab = "Estimador",  breaks= 50, ylab = "Frecuencia", main= tituloMc)
abline(v= thetaPoblacionalMC, col = "red" )
#evaluamos cuantos intervalos capturan el verdadero valor
cuantilNormal = qnorm(0.975, mean = 0, sd=1 )
interInferior = estimadoresMor - ( cuantilNormal* sqrt( varianzasMor ) )
interSuperior = estimadoresMor + ( cuantilNormal* sqrt( varianzasMor ) )
intervalosExitosos = rep( 0,  length(estimadoresMor))
intervalosExitosos = (interInferior <= thetaPoblacionalMor) &
(thetaPoblacionalMor <= interSuperior)
sum(intervalosExitosos) / length(intervalosExitosos)
longitudIntervalos = interSuperior - interInferior
par(mfrow = c(1, 1))
dev.off()
summary(longitudIntervalos)
hist(longitudIntervalos, main = "Longitud de intervalos de confianza",
xlab = "Lontigud", ylab = "Frecuencia")
#calculo de varianza poblacional (usando estimador insesesgado)
varianzasMorPoblacional = ( (numeroActas^2) / n )*
( 1- (n / numeroActas) )*var( baseIne$totalMorena )
hist( varianzasMor, main = "Varianzas estimadas morena" ,
xlab = "estimaciones", ylab = "Frecuencias")
abline(v=varianzasMorPoblacional,  col = "red")
